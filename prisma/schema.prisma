generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  experience  experience[]
}

model education {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_name    String    @db.VarChar(255)
  degree         String    @db.VarChar(255)
  field_of_study String    @db.VarChar(255)
  start_date     DateTime  @db.Timestamp(6)
  end_date       DateTime? @db.Timestamp(6)
  user_id        String    @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model experience {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id String    @db.Uuid
  title      String    @db.VarChar(255)
  start_date DateTime  @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  user_id    String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  company    company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  start_date  DateTime  @db.Timestamp(6)
  end_date    DateTime? @db.Timestamp(6)
  user_id     String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model skill {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  level      Int
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  company     company[]
  education   education[]
  experience  experience[]
  project     project[]
  skill       skill[]
}
